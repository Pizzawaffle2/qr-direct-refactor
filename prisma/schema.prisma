// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String?
  picture      String?        // Add profile picture URL
  qrCodes      QRCode[]
  preferences  UserPreferences?
  socialLinks  SocialLinks?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model UserPreferences {
  id                 Int      @id @default(autoincrement())
  defaultQRColor    String   @default("#000000")
  defaultQRSize     Int      @default(256)
  defaultBackground String   @default("#ffffff")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int      @unique
}

model SocialLinks {
  id       Int     @id @default(autoincrement())
  twitter  String?
  linkedin String?
  github   String?
  website  String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int     @unique
}

model QRCode {
  id          String   @id @default(cuid())
  slug        String   @unique
  content     String
  destination String
  color       String   @default("#000000")
  background  String   @default("#ffffff")
  logo        String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  analytics   Analytics[]
}

model Analytics {
  id        String   @id @default(cuid())
  qrCodeId  String
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id])
  timestamp DateTime @default(now())
  location  String?  // Optional: User location data
  device    String?  // Optional: Device type or details
}

model ShortLink {
  id          String   @id @default(cuid())
  slug        String   @unique
  destination String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScanLog {
  id        String   @id @default(cuid())
  slug      String
  timestamp DateTime @default(now())
}