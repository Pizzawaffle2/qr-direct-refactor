// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String          @unique
  name          String?
  picture       String?         // Add profile picture URL
  qrCodes       QRCode[]
  bioPages      BioPage[]       // Add relation to BioPages
  preferences   UserPreferences?
  socialLinks   SocialLinks?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserPreferences {
  id                 Int      @id @default(autoincrement())
  defaultQRColor    String   @default("#000000")
  defaultQRSize     Int      @default(256)
  defaultBackground String   @default("#ffffff")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int      @unique
}

model SocialLinks {
  id       Int     @id @default(autoincrement())
  twitter  String?
  linkedin String?
  github   String?
  website  String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int     @unique
}

model QRCode {
  id          String   @id @default(cuid())
  slug        String   @unique
  content     String
  destination String
  color       String   @default("#000000")
  background  String   @default("#ffffff")
  logo        String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  analytics   Analytics[]
}

model Link {
  id           String    @id @default(cuid())
  originalUrl  String
  shortUrl     String    @unique
  password     String?   // Optional password protection
  expiresAt    DateTime? // Optional expiration date
  createdAt    DateTime  @default(now())
  clicks       Click[]   // Relation to click analytics
  isActive     Boolean   @default(true)
}

model Click {
  id        String   @id @default(cuid())
  linkId    String
  link      Link     @relation(fields: [linkId], references: [id])
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  region    String?
  latitude  Float?
  longitude Float?
}

model BioPage {
  id          String      @id @default(cuid())
  userId      Int         // Changed to Int to match User model
  user        User        @relation(fields: [userId], references: [id])
  name        String
  bio         String?     // Optional bio text
  theme       Json        // Store theme settings as JSON
  links       Json        // Store array of links as JSON
  isPublished Boolean     @default(false)
  views       Int         @default(0)
  slug        String      @unique // For custom URLs
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  bioClicks   BioClick[]  // Renamed to avoid conflict with existing Click model
  bioAnalytics BioAnalytics[] // Renamed to avoid conflict

  @@index([userId])
}

model BioClick {
  id          String    @id @default(cuid())
  bioPageId   String
  bioPage     BioPage   @relation(fields: [bioPageId], references: [id])
  linkId      String    // ID of the specific link in the JSON array
  timestamp   DateTime  @default(now())
  ipAddress   String?
  userAgent   String?
  referer     String?
  country     String?
  city        String?
  region      String?
  latitude    Float?
  longitude   Float?

  @@index([bioPageId])
  @@index([timestamp])
}

model BioAnalytics {
  id          String    @id @default(cuid())
  bioPageId   String
  bioPage     BioPage   @relation(fields: [bioPageId], references: [id])
  timestamp   DateTime  @default(now())
  event       String    // Type of event (view, click, etc.)
  data        Json?     // Additional event data
  location    String?
  device      String?

  @@index([bioPageId])
  @@index([timestamp])
}

model Analytics {
  id        String   @id @default(cuid())
  qrCodeId  String
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id])
  timestamp DateTime @default(now())
  location  String?  // Optional: User location data
  device    String?  // Optional: Device type or details
}

model ShortLink {
  id          String   @id @default(cuid())
  slug        String   @unique
  destination String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScanLog {
  id        String   @id @default(cuid())
  slug      String
  timestamp DateTime @default(now())
}